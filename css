css
	书写方式
		嵌入式
			<style>
   选择器｛属性：值；*n｝
</style>
		外链式
			使用link在头部中引入文件（多个）；选择器｛属性：值｝
		行内式
			标签中<style=“ 属性：值；“></style>
	选择器
		基本选择器
			通用选择器：*
			标签选择器：标签名｛属性：值；｝
			id选择器：#id｛属性：值；｝一个html，id属性值为唯一
			类选择器： . class｛属性：值；｝
		复合元素选择器
			多元素选择器，多个用逗号隔开
				p，h1{}
			后代元素选择器，空格隔开
				#id p{}
			子元素选择器,匹配属于该元素的所有子元素
				div>p{}
			相邻元素选择器,匹配所有紧随元素的同级元素
				div+div{}
		属性选择器
			[attr]：匹配所有具有attr属性的元素，不考虑值，h1[align]｛｝
			[attr=“val”]：匹配所有attr的值等于val的元素，h1[align=“center”]｛｝
			[attr^=“val”];匹配attr属性以val开头的值；font[color^=“#ff”]
			[attr$=“val”]：匹配attr属性以val结尾的值的元素；font[color$="00"]
			[attr*="val"]:匹配attr属性值中包含val的元素；font[color*="00"]
		伪类选择器，给超链接四种不同状态设置样式，设置顺序：LoVe HAte "爱恨准则"
			：link
			：visited
			：hover
			：active
	属性
		尺寸样式属性
			width；height；
		文本属性
			color：设置颜色
			text-align:left，right，center,水平对齐方向
			text-decoration:none，underline，overline，line-through，修饰线
			text-transfrom：capitalize，uppercase，lowercase，大小写转换或首字母大写
			line-height：px、百分比，设置行高
			text-indent：px、em，首行缩进，可负值
			letter-spacing：px，字符间距
			word-spacing：px，单词间距
		字体属性
			font-style：normal、italic（斜体）
			font-weight：normal、bold（粗）
			font-size：px，文本大小
			font-family：微软雅黑、黑体、宋体，设置文本字体
			font：可简写以上属性，固定顺序，font：italic bold 12px “微软雅黑”；
		列表样式属性
			无序列表、有序列表
				list-style-type：none、disc、square、circle，列表前项目符号的类型
				list-style-poaition：inside，outside，列表标记放置位置
				list-style-image：url，设置列表标记图像
				list-style：square inside url（），在一个声明中设置所有列表属性，值个数位置不定
		超链接美化
			list-style:none;
a:link  a:vistited:｛text-decoration:none去掉下划线，设置颜色｝
 a:hover{text-decoration:underline，设置颜色}
		继承性
			外层元素的样式会被内层元素继承
			样式相同，内层元素取代外层元素
			只有文本样式属性可以实现继承，不是所有样式都能继承
		优先级
			行内样式>ID选择器>类选择器>标签选择器；选择器志向越准确，优先级越高
		！important
			p:{
     color:red  !important；
     font-size:20px；
   } （颜色更改，大小权重不变） 提升属性的权重无穷大，而不是选择器权重，不能提升继承过来的属性权重
		背景样式属性
			background-color：
			background-image：url()
			background-repeat：repeat、repeat-x、repeat-y、no-repeat
			background-position：left、right、top、bottom、center center或者x% y%，可组合使用
			background-attachment：scroll、fixed，背景图片滚动、固定
			background：url（）no-repeat center center fixed，设置背景样式简写
		浮动
			块级元素和文本元素浮动，float：left，right，脱离标准文档流，浮动元素在父元素内浮动，且不占原来的位置
			*｛margin：0px；padding：0px；｝利用通用选择器，清除html标签默认内填充和外边距
			清除浮动：
1、clear：left，right，both；在最后一个浮动元素的下面新建一个空白的div，这个div的主要功能使用于清除浮动。
2、overflow：hidden；溢出的部分隐藏，一般用来给列表清除浮动，父元素加该属性
		盒子模型
			padding：内容到边框的距离
				padding-top、padding-bottom、padding-left、padding-right，简写属性顺序上下左右；
padding：20px；
一个值为上右下左，两个值为上下，三个为上、左右、下，四个值为顺时针上右下左
			margin：外边距，盒子与盒子之间的距离
				margin-top（right、bottom、left）
简写属性顺序上右下左，同padding
				塌陷现象：在标准文档流中，竖直方向的值不会叠加，只取较大值，横向方向没有塌陷现象会叠加距离，浮动元素没有该现象
				居中：标准文档流中margin左、右外边距都设置为auto时（盒子有固定宽度，且为块级元素）
				善于使用父元素的padding，而不使用子元素的margin
		border
			线型：solid、dotted、dashed
border-top（left、right、bottom）
		display
			display：inline、block（可将隐藏的元素显示）、none；块级元素行内元素互相转换，且拥有了转换后元素的特点
		position
			fixed：固定定位，相对于浏览器窗口定位，页面的滚动不影响位置变化，脱离文档标准流
			relative：相对定位，相对于该元素原来的位置进行移动，，没有脱离标准文档流，可覆盖其他标准流元素，很少单独使用，配合绝对定位使用
			absolute：绝对定位，相对于父元素（原则由己近到远，直到找到有设置了定位属性的上级元素，相对定位或固定点位，都无，则根据body浏览器窗口）进行移动，脱标不占有原来位置，会覆盖标准流元素。
子绝父相：子元素为绝对定位，父级元素为相对定位
		z-index
			1、数值大的压盖数值小的z-index
2、只有定位元素（固定定位，绝对地位，相对定位）才有z-index
3、没有单位，正整数，默认0
4、如果多个定位元素没有设置z-index属性，裹着z-index值设置一样，那么写在html后面的定位元素就会压盖住前面的定位元素。 
		css3
			结构伪类
				E:first-child｛属性：值｝
				E:last-child｛属性：值｝
				E:nth-child（n、2n\even、2n+1\odd）｛属性：值｝
				E：only-child
				E：nth-of-style
			border-collapse
				border-collapse:collapse;合并表格边框线
			伪元素
				:first-letter  当前元素中第一个字
				:first-line   当前元素第一行文字
				::before  在之前插入，盒子内部的最前面，eg 
 E::before{content:"hello"}，在盒子内部最前面插入了文本“hello”
				::after    在之后插入，盒子内部的最后面
			文本阴影
				text-shadow：水平阴影px  垂直阴影px  模糊强度px  阴影颜色；可多组用逗号“，”分隔开
			盒子阴影
				box-shadow：水平阴影px 垂直阴影px 模糊强度px  阴影尺寸 阴影颜色 内/外阴影；水平和垂直阴影必须写，其他可省略不写，可多组，用空格隔开
			圆角矩形
				border-radius: 属性值px或百分比%；边角从上左位置开始顺时针设置
			透明度
				rgba(0,0,0, 0.5),  0.5为透明度
			2D过渡转换
				transform
					translate
						transfrom：translate（水平px，垂直px）PX可换位百分比（现对于自身元素的）
transfrom：translateX（水平px）
transfrom：translateY（垂直px）
以浏览器左上角为原点，最大优点不会影响其他元素，对行内元素无效果
					rotate
						transform:rotate（度数deg），顺时针旋转
					旋转中心点transform-origin：x y；方位名词left...，像素，百分比%中心点为原点
					scale
						transform：scale（x y）；宽高缩放倍数，可写一个数表示缩放宽高，可小数
			动画
				1.定义动画
					keyframes，类似定义类选择器
@keyframes 动画名称｛
    0%｛
            width：100xp；
           ｝
     100%｛
              width：200px；
               ｝
｝
					动画名称可自定义
				2.再使用（调用）动画
					/调用动画/
animation-name：动画名称；
/持续时间，单位秒s/
animation-duration：持续时间
				动画序列
					0%是动画的开始，100%是动画的完成。
在@keyframes中规定某项css样式，就能创建由当前延时逐渐改为新样式的动画效果。
用百分比规定变化发生的时间，或用关键词“from”和“to”，等同于0%和100%。
				常用属性
					@keyframes  规定动画
					animation 所有动画属性的简写属性，出了animation-play-state属性
					animation-name 规定@keyframes动画的名称（必须的）
					animation-duration：规定动画完成一个周期的时间，单位秒或毫秒（必须的）
					animation-timing-function：规定动画的运动曲线，默认“ease”
						animation-timing-function：steps（）
	分几步完成动画，有了steps就不用写ease或者linear，一般用于打字效果
					animation-delay：规定动画何时开始，默认0
					animation-iteration-count:规定动画的播放次数，默认1，还有infinite无限次
					animation-direction：规定动画是否在下一周期逆向播放，默认normal，alternate逆播放
					animation-play-state：规定动画是否正在运行或暂停。默认“running“还有“paused”
					animation-fill-mode:规定动画结束后状态，保持forwards，回到起始backwards
				简写
					animation：动画名称 持续时间 运动曲线 何时开始 播放次数 是否反方向 动画起始或者结束状态；
					不包含animation-play-state，暂停动画经常和鼠标经过等其他配合使用
					一个元素添加多个动画用逗号隔开
animation：bear 1s steps（8） infinite，move 3s forwards ；
			3D转换
				transform：translateZ（#px）；向近移动为正值，远为负值，越近Z值越大
					简写：transform：translate3d（xpx，ypx，zpx）；xyz值轴用逗号隔开，不能省略任一值，如果没有就写“0”
				z轴效果用透视辅助显示，写在被观察元素的父元素上，perspective：dpx；此值（视距d）越小，元素显示越大
设置后视角固定，若在直接父级设置视距，该元素下的子元素，虽旋转角度一致，观察者在视觉上看是不一样的
				3D旋转 rotate3d，2d沿着点，3d可沿着某一轴进行旋转
					左手准则，四指方向为旋转正值：
transform：rotateX（45deg）；沿着x轴正方向旋转45度
transform：rotatwY（45deg）；沿着y轴正方向旋转45deg
transform：rotateZ（45deg）；沿着z轴正方向旋转45deg
					简写：transform：rotate3d（x，y，z，deg）
此处xyz为矢量
transform：rotate3d（1，1，0，45deg）
				3d呈现 transform-style
					是否开启3d立体空间，
默认不开启flat，所有子元素在2D平面呈现；
开启preserve-3d，所有子元素在3D平面呈现
写给直接父级，但是影响的是子盒子
			浏览器私有前缀
				为了兼容老版本的写法，比较新版本的浏览器无需添加，建议元素写属性时最后写私有前缀
				-moz-：代表Firefox浏览器私有属性
				-ms-：代表IE浏览器私有属性
				-webkit-：代表Safari、Chrome私有属性
				-o-:代表Opera私有属性
		html5
			四种不同属性语法
				empty   <input type="text" value="John Doe" disabled>
				unquoted 无括号  <input type="text" value=John Doe>
				double-quoted 双括号 <input type="text" value="John Doe">
				single-quoted 单括号 <input type="text" value='John Doe'>
			新特性
				语义化标签，eg：
<header>头部标签
<nav>导航栏标签
<article>内容标签
<section>定义文档某个区域
<aside>侧边栏标签
<footer>尾部标签，等等
（在IE9中需要将这些元素转换为块级元素
header, section, footer, aside, nav, main, article, figure {
    display: block; 
}
）
				表单控件，eg：日期、时间...
				图像支持，<canvas>、<svg>
				API，用本地储存取代cookie
			添加新元素，可以通过浏览器 trick 向 HTML 添加任何新元素
			多媒体标签
				视频
					<video src=""  controls=“controls”></video>
control（控制器）,
标签：<video>（定义声音）
          <source>(规定多媒体资源，可以是多个文件播放格式)
常见属性：width、height、autoplay、muted静音播放，loop循环播放，poster加载视频封面图
				音频
					<audio src="" controls=“controls”></audio>
control（控制器）
标签：<audio >（定义声音）
          <source>(规定多媒体资源，可以是多个文件播放格式)
常见属性：autoplay自动播放，loop循环播放，control控件，url
				多媒体标签总结：
音频和视频的使用方式基本一致
浏览器支持情况不同
谷歌浏览器把音频和视频的自动播放禁止了
可以给视频添加muted属性来静音播放，音频不可以（通过JavaScript解决）
视频标签是重点，经常设置自动播放，不使用controls控件，循环和设置大小属性
			input
				type=“属性值”
					属性值：
email         邮箱
url             网址
date          日期
time          时间
month       月
week         周
number     数字
tel             手机号码
search       搜索框
color         生成一个颜色选择表单
					使用form表单域提交验证表单值
				属性
					required=“required”           提示“此字段不能为 
                                            空”
placeholder=“##”               表单提示内容，伪 
                                            元素选择器修改字 
                                            体颜色,
                                           input::placeholder
                                                   {color:###}
autofocus=“autofocus”       页面加载完成自动 
                                             聚焦到指定表单
autocomplete=“off/on”        是否显示历史搜 
                                              索记录   
multiple=“multiple”              可多选文件提交
			拖放
				设置元素可拖放：draggable=“true”
				拖动什么：ondragstart 和setData()
				拖到何处：ondragover
				进行放置：ondrop
			画布
				<canvas></canvas>，属性宽高
			svg
				子主题 1
	移动web开发
		流式布局
			移动端基础
				主要对webkit内核进行兼容
				开发移动端主要对手机端开发
				碎片化、分辨率严重
				使用谷歌浏览器进行移动端调试
			视口
				布局视口
					ios、Android基本将布局视口分辨率设置为980px，元素看上去会很小，一般默认通过手动缩放页面
				视觉视口
					用户看到的网站区域，通过缩放移动，不影响布局视口，布局视口保持原来的宽度
				理想视口
					对设备来讲是最理想的视口尺寸，需要通过手动添写meta视口标签来通知 浏览器操作，
meta视口标签的主要目的：布局视口的宽度应该与理想视口的宽度一致，简单理解就是设备有多宽，我们的布局视口就有多宽
				meta视口标签
					width：设置的是viewport的宽度，可以设置device-width特殊值
					initial-scale：初始缩放比，大于0的整数
					maximum-scale：最大缩放比，大于0的整数
					minimum-scale：最小缩放比，大于0的整数
					user-scalable：用户是否可以缩放，yes或者no（1或0）
			二倍图
				物理像素&物理像素比
1px不一定等于一个物理像素
PC端页面 ，1个px等于1个物理像素，但是移动端不尽相同
一个px能显示的物理像素点的个数，称之为物理像素比或者屏幕像素比
				图宽高为开发的宽高的两倍，再手动设置图片为开发的宽高 
				背景缩放background-size：宽px 高px；可用百分比
cover    根据最短边完全覆盖盒子
contain 根据最长边完全覆盖盒子，把图像扩展至最大尺寸，以使其宽度和高度完全适应内容区域
			移动端调试
				响应式布局
			移动端技术解决方案
				移动端浏览器主要以webkit为主，只考虑webkit兼容问题，私有前缀只添加-webkit-
				css初始化 normalize.css
				盒子模型 box-sizing，css3中的盒子模型，padding和border不会撑大盒子
css3盒子模型：
box-sizing：border-box；
传统盒子模型：
box-sizing：content-box
				特殊样式eg
点击高亮需要清除，设置为transparent 完成透明    
-webkit-tap-highlight-color:transparent;

默认的外观在ios上加这个属性才能给按钮和输入框自定义样式
-webkit-appearance:none;

禁用长按页面时的弹出 菜单
img，a{-webkit-touch-callout:none;}
			移动端常见布局
				单独制作移动端页面
					流式布局（百分比布局）
						max-width（height），min-width（hight）
						子主题 2
					flex弹性布局
					less+rem+媒体查询布局
					混合布局
				响应式页面兼容移动端
					媒体查询
					bootstarp
	DIV布局
		盒子模型
		弹性布局
		Flex布局
		双飞翼布局
